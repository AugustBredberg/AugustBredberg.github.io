{"ast":null,"code":"import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport { CustomEvent } from './custom-event-polyfill';\nimport * as Éµngcc0 from '@angular/core';\n\nvar MaterializeDirective = function () {\n  /**\n   * @param {?} _el\n   */\n  function MaterializeDirective(_el) {\n    this._el = _el;\n    this._params = null;\n    this._functionName = null;\n    this.previousValue = null;\n    this.previousDisabled = false;\n    this._waitFunction = {};\n    this.changeListenerShouldBeAdded = true;\n    this.init = new EventEmitter();\n    this.initialized = false;\n  }\n\n  Object.defineProperty(MaterializeDirective.prototype, \"materializeParams\", {\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    set: function (params) {\n      this._params = params;\n      this.performElementUpdates();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaterializeDirective.prototype, \"materializeActions\", {\n    /**\n     * @param {?} actions\n     * @return {?}\n     */\n    set: function (actions) {\n      var _this = this;\n\n      actions.subscribe(function (action) {\n        window.setTimeout(function () {\n          if (typeof action === \"string\") {\n            _this.performLocalElementUpdates(action);\n          } else {\n            _this.performLocalElementUpdates(action.action, action.params);\n          }\n        }, 1);\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaterializeDirective.prototype, \"materialize\", {\n    /**\n     * @param {?} functionName\n     * @return {?}\n     */\n    set: function (functionName) {\n      this._functionName = functionName;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaterializeDirective.prototype, \"materializeSelectOptions\", {\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set: function (options) {},\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @return {?}\n   */\n\n  MaterializeDirective.prototype.ngAfterViewInit = function () {\n    this.performElementUpdates();\n  };\n  /**\n   * @param {?=} _unused\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.ngOnChanges = function (_unused) {\n    var _this = this;\n\n    if (this.isSelect()) {\n      setTimeout(function () {\n        return _this.performLocalElementUpdates();\n      }, 10);\n    }\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.ngOnDestroy = function () {\n    this.performElementRemotion();\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.ngDoCheck = function () {\n    var\n    /** @type {?} */\n    nativeElement = this._el.nativeElement;\n    var\n    /** @type {?} */\n    jQueryElement = $(nativeElement);\n\n    if (this.isSelect()) {\n      var\n      /** @type {?} */\n      shouldUpdate = false;\n\n      if (nativeElement.disabled != this.previousDisabled) {\n        this.previousDisabled = nativeElement.disabled;\n        shouldUpdate = true;\n      }\n\n      if (!jQueryElement.attr(\"multiple\") && nativeElement.value != this.previousValue) {\n        // handle select changes of the model\n        this.previousValue = nativeElement.value;\n        shouldUpdate = true;\n      }\n\n      if (shouldUpdate) {\n        this.performLocalElementUpdates();\n      }\n    } else if (this.isTextarea()) {\n      if (nativeElement.value != this.previousValue) {\n        this.previousValue = nativeElement.value;\n        this.performElementUpdates();\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.performElementRemotion = function () {\n    if (this.isTooltip()) {\n      var\n      /** @type {?} */\n      nativeElement = this._el.nativeElement;\n      var\n      /** @type {?} */\n      jQueryElement = $(nativeElement);\n      var\n      /** @type {?} */\n      tooltipId = jQueryElement.attr('data-tooltip-id');\n\n      if (tooltipId) {\n        $('#' + tooltipId).remove();\n      }\n    }\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.performElementUpdates = function () {\n    var _this = this; // it should have been created by now, but confirm anyway\n\n\n    if (Materialize && Materialize.updateTextFields) {\n      Materialize.updateTextFields();\n    } // handle select changes from the HTML\n\n\n    if (this.isSelect() && this.changeListenerShouldBeAdded) {\n      var\n      /** @type {?} */\n      nativeElement_1 = this._el.nativeElement;\n      var\n      /** @type {?} */\n      jQueryElement = $(nativeElement_1);\n      jQueryElement.on(\"change\", function (e) {\n        if (!e.originalEvent || !e.originalEvent.internalToMaterialize) {\n          var\n          /** @type {?} */\n          event_1 = document.createEvent(\"CustomEvent\"); //if (jQueryElement.attr(\"multiple\")) {\n          //event.initCustomEvent(\"input\",false,false,undefined);\n          //}\n          //else {\n\n          event_1.initCustomEvent(\"change\", false, false, undefined); //}\n\n          event_1.internalToMaterialize = true;\n          nativeElement_1.dispatchEvent(event_1);\n        }\n      });\n      this.changeListenerShouldBeAdded = false;\n    }\n\n    if (this.isAutocomplete()) {\n      var\n      /** @type {?} */\n      nativeElement_2 = this._el.nativeElement;\n      var\n      /** @type {?} */\n      jQueryElement = $(nativeElement_2);\n      jQueryElement.on(\"change\", function (e) {\n        return nativeElement_2.dispatchEvent(CustomEvent(\"input\"));\n      });\n    }\n\n    if (this.isDatePicker()) {\n      var\n      /** @type {?} */\n      nativeElement_3 = this._el.nativeElement;\n      var\n      /** @type {?} */\n      jqueryPickerElement_1 = $(nativeElement_3);\n\n      var\n      /** @type {?} */\n      datePicker = jqueryPickerElement_1[this._functionName].apply(jqueryPickerElement_1, this._params);\n\n      var\n      /** @type {?} */\n      picker_1 = datePicker.pickadate('picker');\n      setTimeout(function () {\n        if (_this.ngModel) {\n          picker_1.set('select', _this.ngModel);\n        } else {\n          var\n          /** @type {?} */\n          value = jqueryPickerElement_1.val();\n\n          if (value && value.length > 0) {\n            picker_1.set('select', value);\n          }\n        }\n\n        jqueryPickerElement_1.on('change', function (e) {\n          return nativeElement_3.dispatchEvent(CustomEvent(\"input\"));\n        });\n      });\n    }\n\n    if (this.isTimePicker()) {\n      var\n      /** @type {?} */\n      nativeElement_4 = this._el.nativeElement;\n      var\n      /** @type {?} */\n      jqueryPickerElement_2 = $(nativeElement_4);\n\n      var\n      /** @type {?} */\n      timePicker = jqueryPickerElement_2[this._functionName].apply(jqueryPickerElement_2, this._params);\n\n      var\n      /** @type {?} */\n      picker_2 = timePicker.pickatime('picker');\n      setTimeout(function () {\n        if (_this.ngModel) {\n          picker_2.val(_this.ngModel);\n        } else {\n          picker_2.val(jqueryPickerElement_2.val());\n        }\n\n        jqueryPickerElement_2.on('change', function (e) {\n          return nativeElement_4.dispatchEvent(CustomEvent(\"input\"));\n        });\n      });\n    }\n\n    if (this.isChips()) {\n      var\n      /** @type {?} */\n      nativeElement_5 = this._el.nativeElement;\n      var\n      /** @type {?} */\n      jQueryElement = $(nativeElement_5);\n      jQueryElement.on(\"chip.add\", function (e, chip) {\n        return nativeElement_5.dispatchEvent(CustomEvent(\"chip.add\", chip));\n      });\n      jQueryElement.on(\"chip.delete\", function (e, chip) {\n        return nativeElement_5.dispatchEvent(CustomEvent(\"chip.delete\", chip));\n      });\n      jQueryElement.on(\"chip.select\", function (e, chip) {\n        return nativeElement_5.dispatchEvent(CustomEvent(\"chip.select\", chip));\n      });\n    }\n\n    if (this.isTextarea()) {\n      this._el.nativeElement.dispatchEvent(CustomEvent(\"autoresize\", {\n        bubbles: true,\n        cancelable: false,\n        detail: undefined\n      }));\n    }\n\n    this.performLocalElementUpdates();\n  };\n  /**\n   * @param {?=} functionName\n   * @param {?=} params\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.performLocalElementUpdates = function (functionName, params) {\n    var _this = this;\n\n    if (functionName === void 0) {\n      functionName = this._functionName;\n    }\n\n    if (params === void 0) {\n      params = this._params;\n    }\n\n    if (this._waitFunction[functionName]) {\n      return;\n    }\n\n    this._waitFunction[functionName] = true;\n    $(document).ready(function () {\n      _this._waitFunction[functionName] = false;\n\n      if (functionName) {\n        var\n        /** @type {?} */\n        jQueryElement = $(_this._el.nativeElement);\n\n        if (jQueryElement[functionName]) {\n          if (params) {\n            if (params instanceof Array) {\n              jQueryElement[functionName].apply(jQueryElement, params);\n            } else {\n              throw new Error(\"Params has to be an array.\");\n            }\n          } else {\n            jQueryElement[functionName]();\n          }\n        } else {\n          // fallback to running this function on the global Materialize object\n          if (Materialize[functionName]) {\n            if (params) {\n              if (params instanceof Array) {\n                Materialize[functionName].apply(Materialize, params);\n              } else {\n                throw new Error(\"Params has to be an array.\");\n              }\n            } else {\n              Materialize[functionName]();\n            }\n          } else {\n            throw new Error(\"Couldn't find materialize function ''\" + functionName + \"' on element or the global Materialize object.\");\n          }\n        }\n\n        if (!_this.initialized) {\n          _this.initialized = true;\n\n          _this.init.emit();\n        }\n      }\n    });\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.isTooltip = function () {\n    return this._functionName && this._functionName === \"tooltip\";\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.isSelect = function () {\n    return this._functionName && this._functionName === \"material_select\";\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.isDatePicker = function () {\n    return this._functionName && this._functionName === \"pickadate\";\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.isTimePicker = function () {\n    return this._functionName && this._functionName === \"pickatime\";\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.isChips = function () {\n    return this._functionName && this._functionName === \"material_chip\";\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.isAutocomplete = function () {\n    return this._functionName && this._functionName === \"autocomplete\";\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.isTextarea = function () {\n    return this._el.nativeElement.nodeName == \"TEXTAREA\";\n  };\n  /**\n   * @return {?}\n   */\n\n\n  MaterializeDirective.prototype.enableDPButtons = function () {\n    $('.picker__clear').removeAttr(\"disabled\");\n    $('.picker__today').removeAttr(\"disabled\");\n    $('.picker__close').removeAttr(\"disabled\");\n    $('.picker__select--year').removeAttr(\"disabled\");\n    $('.picker__select--month').removeAttr(\"disabled\");\n  };\n\n  MaterializeDirective.Éµfac = function MaterializeDirective_Factory(t) {\n    return new (t || MaterializeDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef));\n  };\n\n  MaterializeDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: MaterializeDirective,\n    selectors: [[\"\", \"materialize\", \"\"]],\n    inputs: {\n      materializeParams: \"materializeParams\",\n      materializeActions: \"materializeActions\",\n      materialize: \"materialize\",\n      materializeSelectOptions: \"materializeSelectOptions\",\n      ngModel: \"ngModel\"\n    },\n    outputs: {\n      init: \"init\"\n    },\n    features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MaterializeDirective;\n}();\n\nexport { MaterializeDirective };\n/**\n * @nocollapse\n */\n\nMaterializeDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nMaterializeDirective.propDecorators = {\n  'init': [{\n    type: Output\n  }],\n  'materializeParams': [{\n    type: Input\n  }],\n  'materializeActions': [{\n    type: Input\n  }],\n  'materialize': [{\n    type: Input\n  }],\n  'materializeSelectOptions': [{\n    type: Input\n  }],\n  'ngModel': [{\n    type: Input\n  }]\n};\n\nfunction MaterializeDirective_tsickle_Closure_declarations() {\n  /** @type {?} */\n  MaterializeDirective.decorators;\n  /**\n   * @nocollapse\n   * @type {?}\n   */\n\n  MaterializeDirective.ctorParameters;\n  /** @type {?} */\n\n  MaterializeDirective.propDecorators;\n  /** @type {?} */\n\n  MaterializeDirective.prototype._params;\n  /** @type {?} */\n\n  MaterializeDirective.prototype._functionName;\n  /** @type {?} */\n\n  MaterializeDirective.prototype.previousValue;\n  /** @type {?} */\n\n  MaterializeDirective.prototype.previousDisabled;\n  /** @type {?} */\n\n  MaterializeDirective.prototype._waitFunction;\n  /** @type {?} */\n\n  MaterializeDirective.prototype.changeListenerShouldBeAdded;\n  /** @type {?} */\n\n  MaterializeDirective.prototype.init;\n  /** @type {?} */\n\n  MaterializeDirective.prototype.initialized;\n  /** @type {?} */\n\n  MaterializeDirective.prototype.ngModel;\n  /** @type {?} */\n\n  MaterializeDirective.prototype._el;\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}